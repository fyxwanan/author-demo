{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["ObjectList","id","name","App","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","getBoxIds","linkIds","forEach","item","index","top","document","getElementById","concat","push","key","offsetTop","getBoundingClientRect","setState","scrollToAnchor","anchorName","anchorElement","scrollIntoView","block","behavior","state","_this2","scrollRef","scrollTop","classList","add","k","v","remove","_this3","contentOptions","LinkOptions","react_default","a","createElement","className","onClick","bind","style","width","height","border","onScrollCapture","onScrollEvent","overflowY","ref","c","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.158bc781.chunk.js","sourcesContent":["import React, {Component} from 'react';\r\nimport './App.css';\r\n\r\nconst ObjectList =\r\n    [{id: 1, name: '橘子'},\r\n    {id: 2, name: '苹果'},\r\n    {id: 3, name: '香蕉'},\r\n    {id: 4, name: '菠萝'}];\r\n\r\nclass App extends Component{\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n\r\n        };\r\n    }\r\n\r\n\r\n    componentDidMount() {\r\n        this.getBoxIds();\r\n    }\r\n\r\n    /**\r\n     *  1. 在React生命周期函数中执行函数\r\n     *  2. 获取每个块的正文内容初始距离浏览器边框的距离 offsetTop\r\n     */\r\n    getBoxIds = () => {\r\n        // 正文板块绑定的id数组\r\n        const linkIds = [];\r\n        ObjectList.forEach((item, index) => {\r\n            const top = document.getElementById(`${item.id}`);\r\n            if (top) {\r\n                linkIds.push({ key: item.id, offsetTop: top.getBoundingClientRect().top});\r\n            }\r\n        })\r\n        this.setState({ linkIds });\r\n    };\r\n\r\n\r\n    // 这是滚动方法\r\n    scrollToAnchor = (anchorName) => {\r\n        if (anchorName || anchorName === 0) {\r\n            // 找到锚点\r\n            const anchorElement = document.getElementById(anchorName);\r\n            // 如果对应id的锚点存在，就跳转到锚点\r\n            if (anchorElement) {\r\n                anchorElement.scrollIntoView({\r\n                    block: 'start',\r\n                    behavior: 'smooth',\r\n                });\r\n            }\r\n        }\r\n    };\r\n\r\n    /**\r\n     *  activeLink   -- 高亮的类名，属性在css中自行设置\r\n     *  linkIds    --  锚点对应div id集合的数组\r\n     *  this.scrollRef.scrollTop  滚动条滚动的距离\r\n     */\r\n    onScrollEvent() {\r\n        const { linkIds } = this.state;\r\n        linkIds.forEach((item, index) => {\r\n            if (this.scrollRef.scrollTop > item.offsetTop) {\r\n                document.getElementById(`link-${item.key}`).classList.add('activeLink');\r\n                linkIds.forEach((k, v) => {\r\n                    if (item.key !== k.key) {\r\n                        document.getElementById(`link-${k.key}`).classList.remove('activeLink');\r\n                    }\r\n                });\r\n            }\r\n        });\r\n    }\r\n\r\n  render() {\r\n      const contentOptions = [];\r\n      const LinkOptions = [];\r\n      ObjectList.forEach((item) => {\r\n          LinkOptions.push(<div id={`link-${item.id}`} className=\"link-content\" onClick={this.scrollToAnchor.bind(this, item.id)}>{item.name}</div>)\r\n          contentOptions.push(\r\n              <div className=\"content-child\">\r\n                  <span id={`${item.id}`}>{item.name}</span>\r\n                  <div style={{ width: '100%', height: 500, border: 'solid 1px red' }}>\r\n                      我是内容，我是内容\r\n                  </div>\r\n              </div>\r\n          )\r\n      });\r\n\r\n      return (\r\n          <div className=\"App\">\r\n              <div\r\n                  id=\"know-detail-body\"\r\n                  onScrollCapture={() => this.onScrollEvent()}\r\n                  style={{ height: 1000, overflowY: 'scroll' }}\r\n                  ref={(c) => {\r\n                      this.scrollRef = c;\r\n                  }}\r\n              >\r\n                  <div className=\"content\">\r\n                      <div id=\"content-div\">\r\n                          {contentOptions}\r\n                          <div style={{ width: '100%', height: 500, border: 'solid 1px red' }}>\r\n                            我是其他内容\r\n                            我是评论\r\n                            我是大帅比\r\n                            给个star吧 哈哈\r\n                          </div>\r\n                      </div>\r\n                  </div>\r\n\r\n                  <div className=\"anchor-link-body\" id=\"know-link-anchor\">\r\n                      <div className=\"link-content-link\">\r\n                          <span />\r\n                      </div>\r\n                      <div id=\"link-contentKey\">\r\n                          {LinkOptions}\r\n                      </div>\r\n                  </div>\r\n\r\n              </div>\r\n          </div>\r\n      );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}